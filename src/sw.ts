import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, CacheFirst } from 'workbox-strategies';
import { ExpirationPlugin } from 'workbox-expiration';

// Precache all assets generated by your build process
// @ts-ignore
precacheAndRoute(self.__WB_MANIFEST);

// Cache Google Fonts with a stale-while-revalidate strategy
registerRoute(
  ({url}) => url.origin === 'https://fonts.googleapis.com' || 
             url.origin === 'https://fonts.gstatic.com',
  new StaleWhileRevalidate({
    cacheName: 'google-fonts',
  })
);

// Cache images with a cache-first strategy and expiration
registerRoute(
  ({request}) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'images-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
      }),
    ],
  })
);

// Cache CDN resources (like from cdn.gpteng.co)
registerRoute(
  ({url}) => url.origin === 'https://cdn.gpteng.co',
  new StaleWhileRevalidate({
    cacheName: 'cdn-resources',
  })
);

// Default cache strategy for everything else
registerRoute(
  () => true,
  new StaleWhileRevalidate({
    cacheName: 'default-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 7 * 24 * 60 * 60, // 7 days
      }),
    ],
  })
);

// Enhanced message handling for silent updates
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    console.log('Service worker: Skipping waiting phase for immediate activation');
    // @ts-ignore
    self.skipWaiting();
  }
});

// Automatic activation of new service worker
self.addEventListener('activate', (event) => {
  console.log('Service worker: Activated and taking control');
  // @ts-ignore
  const activateEvent = event as ExtendableEvent;
  activateEvent.waitUntil((self as any).clients.claim());
  
  // Clear old caches for critical updates
  activateEvent.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          // Keep current caches but clear outdated ones
          if (cacheName.includes('workbox-precache')) {
            console.log('Service worker: Clearing outdated precache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});

// Install event for immediate activation
self.addEventListener('install', (event) => {
  console.log('Service worker: Installing new version');
  // Don't skip waiting to avoid interfering with PWA install prompts
  // @ts-ignore
  const installEvent = event as ExtendableEvent;
  installEvent.waitUntil((self as any).skipWaiting());
});

// Handle controlled pages and notify about updates
self.addEventListener('controllerchange', () => {
  console.log('Service worker: Controller changed, new version active');
  // Optionally refresh controlled clients
  // @ts-ignore
  (self as any).clients.matchAll().then((clients: any[]) => {
    clients.forEach(client => {
      client.postMessage({
        type: 'SW_UPDATED',
        message: 'Service worker updated successfully'
      });
    });
  });
});
